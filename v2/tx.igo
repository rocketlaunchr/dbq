// Copyright 2019-20 PJ Engineering and Business Solutions Pty. Ltd. All rights reserved.

package dbq

import (
	"context"
	"database/sql"
	"fmt"

	rlSql "github.com/rocketlaunchr/mysql-go"
)

// QFn is shorthand for Q. It will automatically use the appropriate transaction.
type QFn func(ctx context.Context, query string, options *Options, args ...interface{}) (interface{}, error)

// EFn is shorthand for E. It will automatically use the appropriate transaction.
type EFn func(ctx context.Context, query string, options *Options, args ...interface{}) (sql.Result, error)

// Tx is used to perform an arbitrary operation and not have to worry about rolling back a transaction.
// The transaction is automatically rolled back unless it is explicitly committed.
//
// NOTE: Until this note is removed, this function is not necessarily backward compatible.
func Tx(ctx context.Context, db interface{}, fn func(tx Txer, Q QFn, E EFn)) error {

	var (
		alreadyTx bool
		tx        interface{}
		err       error
	)

	// Check if db is valid
	switch db := db.(type) {
	case BeginTxer:
		tx, err = db.BeginTx(ctx, nil)
		if err != nil {
			return err
		}
	case beginTxer2:
		tx, err = db.BeginTx(ctx, nil)
		if err != nil {
			return err
		}
	case *sql.Tx, *rlSql.Tx:
		tx = db
		alreadyTx = true
	default:
		panic(fmt.Sprintf("interface conversion: %T is not dbq.BeginTxer: missing method: BeginTx", db))
	}

	defer func() {
		if r := recover(); r != nil {
			tx.(Txer).Rollback()
			panic(r)
		}
	}()

	qFn := func(ctx context.Context, query string, options *Options, args ...interface{}) (interface{}, error) {
		res, err := Q(ctx, tx, query, options, args...)
		if err == sql.ErrTxDone && !alreadyTx {
			return Q(ctx, db, query, options, args...)
		}
		return res, err
	}

	eFn := func(ctx context.Context, query string, options *Options, args ...interface{}) (sql.Result, error) {
		return E(ctx, tx.(ExecContexter), query, options, args...)
	}

	fn(tx.(Txer), qFn, eFn)
	err = tx.(Txer).Rollback()
	if err == sql.ErrTxDone {
		return nil
	}
	return err
}
